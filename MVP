
Day 7
  Set it to run from a server.js file like we did in lab.

Day 8
  None

Day 9
  Peer code review assignments (done)

Day 10/The Weekend
    Apply some functional programming concepts to your portfolio codebase.
    Eliminate all for loops.
    Use map where you are transforming one collection into another.
    In at least one place, enclose the contents of a script file in an IIFE, that exports your high-level objects.
    Refactor any parts of your app that could be more loosely coupled. Make smaller functions that can accept and expect the return values of other functions!
    Think of a useful way to use reduce. Maybe you want to put some "fun facts stats" in your footer?

  Technical Requirements
    Use of at least one .map() method.
    Use of at least one .reduce() method.
    IIFE present on at least one .js file.

Day 11
  We converted the blog into a SPA by using the page.js library to capture clicks and execute a function to modify the page, rather than reloading content from a server.

  Give your portfolio the same treatment. Update your main nav so that each clickable item is a link to a different url, that is handled by a function as indicated by page.js.

  Keep your code organized in a M-V-C structure that isolates data management from presentation layer, from the controller that holds it all together.

Day 12
    In our blog, we used RESTful routes to interact with the Github API. It's time to take this a step further and integrate this functionality into your portfolio project.

    To get started, you will need to create a controller that includes a call to the Github API. This call should grab data about your individual account, and render portions of the returned content to the page, once the data has been loaded. This is fairly open ended, so use whatever data you deem fit and be sure to separate your concerns.
  
  Technical Requirements
    Ensure your code passes ESLint.
    Place all code within the proper layer of MVC abstraction and encapsulation.
    Use a proxied, authenticated ajax call to GitHub's API to get data from the API.
    Keep your portfolio responsive as it displays API data.
    DO NOT publish your GitHub Token to any public repo.

Day 13
  Technical Requirements
    Ensure your code passes ESLint
    DO NOT create your Heroku app with a default name. If you do accidentally, rename it. Or blow it away, and start again.
    Link to your live site in your portfolio README on GitHub.

  User Stories
    As a developer, I want my portfolio to run in a development environment that closely matches production, so that I can reduce bugs related to infrastructure surprises.
    
    You'll need to create a new Heroku app, and link it to your portfolio
    
    As a site owner, I want my site running on a robust hosting platform, so that I don't have to hire a sysadmin.
    
    You'll need to get your app deployed and running on Heroku.
    Heroku will need to know what kind of app you are running, and how to run it.
    You can create a new package.json file, or copy over package.json and server.js from the blog project.
    
    As a developer, I want my secret tokens accessed only through environment variables, so that I can keep them secure.
    You'll need to configure an environment variable on your production server, so the server.js file can access your token when it's running.

Day 14
  Ensure your code passes ESLint.
  Use middleware to manage state
  Use middleware to access resources based on parameters defined in your routes.
  Use functional programming to refactor any relevant View-specific methods.