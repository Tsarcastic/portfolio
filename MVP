Day 2

  User Stories
    As a developer, I want my site to use valid and semantic markup, so that employers will love me.
    As the creator, I want the page to link to my social and GitHub pages, so that visitors can follow me, and I can build my audience.
    As a developer, I want portfolio items displayed with a repeatable template, so that I can reuse it, and abstract out the details for individual projects.
    As a developer, I want my CSS organized (think SMACSS) so that I can find my stylings swiftly.

  Technical Requirements
    Think of some ideas for your source data, and code it up in its own file! Build out an array of three objects to start with, all having similar properties.
    Create a new .js file with the appropriate methods to help modify your source data to help render it to the DOM:
    Use good Object Oriented code: Create a constructor function for projects or source data.
    Leave as little in the window (global) namespace as possible: attach functions to objects, etc.
    Use jQuery to clone the example markup for each project, as you add additional content.
    Your "Project" prototype should have a .toHtml() function that adds new data to the DOM.
    Refactor your CSS into a base, layout, and module structure where applicable.

Day 3
  User Stories
    As the creator, I want the Home and About nav links to act as tabs, so my story is revealed FAST.
    This means your links to NOT navigate to a new page.
    Instead, your "single page app" shows only the section related to the navigation tab that is selected.
    You can use 'data-' attributes to associate a content section with a particular tab
    Then use jQuery so when the tab is clicked, you hide all the sections, then reveal the associated section only.
    As a reader, I want the portfolio to use a nice color scheme, so that it stands out visually.

  Technical Requirements
    Use event delegation whenever appropriate.
    Add click handlers to at leat one nav section.
    Do as much work as you can with advanced selectors, rather than littering your markup with classes and ids.
    When classes and IDs are needed, pick semantic names. There is to be no $('#content .content') nonsense!

Day 4
  User Stories
    As a developer, I want to use Handlebars for my project template, so that I can include new projects more easily.
    As a developer, I want my CSS styles to follow SMACSS organization, so that I know where to look for creating and editing styles.
  Technical Requirements
    Add Handlebars to your blogging system.
    Organize your CSS code according to SMACSS, with at least a file for base, layout, and modules

Day 5
  Gavin and I worked on each others'

Day 6
  User Stories
    As a developer, I want to store my project data in a .json file, so that I can keep it organized.
    As a developer, I want to retrieve that source data file asynchronously, so that my app logic gets the data just when I need it.
  Technical Requirements
    Transfer your collection of data over to a .json file, replacing your original file.
    JSON-Lint to the rescue!
    Continue to follow good SMACSS principles.
    Be sure to use the correct jQuery method for each AJAX call.
    Be thoughtful when functions are executed asynchronously. This is a major source of bugs!

Day 7
    Set it to run from a server.js file like we did in lab.

Day 8
    Catch up!

Day 9
    Peer code review assignments

Day 10/The Weekend
    Adding in the rest of the technical requirements
